name: Tier 1 - Dashboard Data Collection

on:
  schedule:
    # Runs every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  collect-dashboard-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verify encrypted environment setup
      env:
        ENV_ENCRYPTION_KEY: ${{ secrets.ENV_ENCRYPTION_KEY }}
      run: |
        echo "Verifying encrypted environment setup..."
        
        # Check if encryption key is available
        if [ -z "$ENV_ENCRYPTION_KEY" ]; then
          echo "ERROR: ENV_ENCRYPTION_KEY not found in secrets"
          exit 1
        fi
        
        # Check if encrypted file exists
        if [ ! -f ".env.encrypted" ]; then
          echo "ERROR: .env.encrypted file not found"
          exit 1
        fi
        
        echo "✓ Encryption key available"
        echo "✓ Encrypted file found"
        
        # Test decryption (without exposing secrets)
        python -c "
from env_manager import EncryptedEnvManager
import os
try:
    env_manager = EncryptedEnvManager()
    env_vars = env_manager.load_encrypted_env('.env.encrypted')
    print(f'✓ Successfully loaded {len(env_vars)} environment variables')
    
    # Verify key variables are available
    required_vars = ['SUPABASE_URL', 'SUPABASE_SERVICE_KEY']
    for var in required_vars:
        if os.getenv(var):
            print(f'✓ {var}: Available')
        else:
            print(f'✗ {var}: Missing')
            exit(1)
    
    # Count account credentials
    account_vars = [var for var in env_vars.keys() if 'ACCESS_KEY' in var]
    print(f'✓ Found {len(account_vars)} account access keys')
    
except Exception as e:
    print(f'✗ Failed to load encrypted environment: {e}')
    exit(1)
"
        
    - name: Run Tier 1 data collection
      run: python collect_tier1.py
      env:
        # Encryption key for .env file
        ENV_ENCRYPTION_KEY: ${{ secrets.ENV_ENCRYPTION_KEY }}
        
    - name: Log completion
      run: echo "Tier 1 data collection completed at $(date)"

